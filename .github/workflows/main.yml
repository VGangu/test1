name: Smart CI/CD with AutoFix & Root Cause Tagging

on:
  push:
    branches: [main]

jobs:
  categorize-failure:
    name: Detect & Categorize Pipeline Failures
    runs-on: ubuntu-latest
    outputs:
      root_cause: ${{ steps.categorize.outputs.root_cause }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run CI Tests
        id: test
        run: |
          echo "Simulating CI failure..." && exit 1  # simulate failure

      - name: Categorize Failure
        id: categorize
        if: failure()
        run: |
          echo "import json; json.dump({'root_cause': 'infra', 'details': 'DNS timeout'}, open('root_cause.json', 'w'))" | python
          echo "root_cause=infra" >> $GITHUB_OUTPUT

      - name: Upload Root Cause Metadata
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: root-cause-tag
          path: root_cause.json

  autofix:
    name: AutoFix Known Failures
    runs-on: ubuntu-latest
    needs: categorize-failure
    if: contains(fromJson('["infra", "config"]'), needs.categorize-failure.outputs.root_cause)
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Root Cause Metadata
        uses: actions/download-artifact@v4
        with:
          name: root-cause-tag

      - name: Run AutoFix Logic
        run: |
          python tools/autofix_engine.py root_cause.json

      - name: Rerun Tests (Optional)
        run: |
          echo "Rerunning tests..." && ./rerun-tests.sh || echo "AutoFix failed."

  notify:
    name: Notify & Log
    runs-on: ubuntu-latest
    needs: [categorize-failure, autofix]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Metadata
        uses: actions/download-artifact@v4
        with:
          name: root-cause-tag

      - name: Notify Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: 'ci-alerts'
          bot-token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            {
              "text": "üîç Root cause: ${{ needs.categorize-failure.outputs.root_cause || 'N/A' }}\nüîß AutoFix: ${{ needs.autofix.result || 'skipped' }}"
            }

      - name: Log to Monitoring
        run: |
          curl -X POST https://monitoring.example.com/log \
          -H "Content-Type: application/json" \
          -d @root_cause.json
